"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _Element = _interopRequireDefault(require("./Element"));

var _constants = require("./constants");

var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var INVALID_ROOTS = ['<!DOC', '<HTML', '<HEAD', '<BODY'];
var ROOT_COMPARE_LENGTH = 5;
var ARIA_COMPARE_LENGTH = 5;

var Parser = function () {
  function Parser(markup) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var filters = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    (0, _classCallCheck2.default)(this, Parser);
    (0, _defineProperty2.default)(this, "doc", void 0);
    (0, _defineProperty2.default)(this, "content", []);
    (0, _defineProperty2.default)(this, "props", void 0);
    (0, _defineProperty2.default)(this, "matchers", void 0);
    (0, _defineProperty2.default)(this, "filters", void 0);
    (0, _defineProperty2.default)(this, "keyIndex", void 0);

    if ("production" !== process.env.NODE_ENV) {
      if (markup && typeof markup !== 'string') {
        throw new TypeError('Interweave parser requires a valid string.');
      }
    }

    this.props = props;
    this.matchers = matchers;
    this.filters = filters;
    this.keyIndex = -1;
    this.doc = this.createDocument(markup || '');
  }

  (0, _createClass2.default)(Parser, [{
    key: "applyAttributeFilters",
    value: function applyAttributeFilters(name, value) {
      return this.filters.reduce(function (nextValue, filter) {
        return typeof filter.attribute === 'function' ? filter.attribute(name, nextValue) : nextValue;
      }, value);
    }
  }, {
    key: "applyNodeFilters",
    value: function applyNodeFilters(name, node) {
      return this.filters.reduce(function (nextNode, filter) {
        return nextNode && typeof filter.node === 'function' ? filter.node(name, nextNode) : nextNode;
      }, node);
    }
  }, {
    key: "applyMatchers",
    value: function applyMatchers(string, parentConfig) {
      var _this = this;

      var elements = [];
      var props = this.props;
      var matchedString = string;
      var parts = null;
      this.matchers.forEach(function (matcher) {
        var tagName = matcher.asTag().toLowerCase();

        var config = _this.getTagConfig(tagName);

        if (props[matcher.inverseName] || _constants.TAGS_BLACKLIST[tagName] || !props.disableWhitelist && !_constants.TAGS[tagName]) {
          return;
        }

        if (!_this.canRenderChild(parentConfig, config)) {
          return;
        }

        while (parts = matcher.match(matchedString)) {
          var _ref = parts,
              match = _ref.match,
              partProps = (0, _objectWithoutProperties2.default)(_ref, ["match"]);
          matchedString = matchedString.replace(match, "#{{".concat(elements.length, "}}#"));
          _this.keyIndex += 1;
          var element = matcher.createElement(match, (0, _objectSpread2.default)({}, props, partProps, {
            key: _this.keyIndex
          }));

          if (element) {
            elements.push(element);
          }
        }
      });

      if (elements.length === 0) {
        return matchedString;
      }

      var matchedArray = [];
      var lastIndex = 0;

      while (parts = matchedString.match(/#\{\{(\d+)\}\}#/)) {
        var _ref2 = parts,
            _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
            no = _ref3[1];

        var _ref4 = parts,
            _ref4$index = _ref4.index,
            index = _ref4$index === void 0 ? 0 : _ref4$index;

        if (lastIndex !== index) {
          matchedArray.push(matchedString.slice(lastIndex, index));
        }

        matchedArray.push(elements[parseInt(no, 10)]);
        lastIndex = index + parts[0].length;
        matchedString = matchedString.replace("#{{".concat(no, "}}#"), "%{{".concat(no, "}}%"));
      }

      if (lastIndex < matchedString.length) {
        matchedArray.push(matchedString.slice(lastIndex));
      }

      return matchedArray;
    }
  }, {
    key: "canRenderChild",
    value: function canRenderChild(parentConfig, childConfig) {
      if (!parentConfig.tagName || !childConfig.tagName) {
        return false;
      }

      if (parentConfig.children && parentConfig.children.length > 0 && parentConfig.children.indexOf(childConfig.tagName) === -1) {
        return false;
      }

      if (childConfig.parent && childConfig.parent.length > 0 && childConfig.parent.indexOf(parentConfig.tagName) === -1) {
        return false;
      }

      if (!parentConfig.self && parentConfig.tagName === childConfig.tagName) {
        return false;
      }

      if (!parentConfig.block && childConfig.type === _constants.TYPE_BLOCK) {
        return false;
      }

      if (!parentConfig.inline && childConfig.type === _constants.TYPE_INLINE) {
        return false;
      }

      return true;
    }
  }, {
    key: "convertLineBreaks",
    value: function convertLineBreaks(markup) {
      var _this$props = this.props,
          noHtml = _this$props.noHtml,
          disableLineBreaks = _this$props.disableLineBreaks;

      if (noHtml || disableLineBreaks || markup.match(/<((?:\/[a-z ]+)|(?:[a-z ]+\/))>/gi)) {
        return markup;
      }

      var nextMarkup = markup.replace(/\r\n/g, '\n');
      nextMarkup = nextMarkup.replace(/\n{3,}/g, '\n\n\n');
      nextMarkup = nextMarkup.replace(/\n/g, '<br/>');
      return nextMarkup;
    }
  }, {
    key: "createDocument",
    value: function createDocument(markup) {
      var doc = document.implementation.createHTMLDocument('Interweave');

      if (INVALID_ROOTS.indexOf(markup.substr(0, ROOT_COMPARE_LENGTH).toUpperCase()) >= 0) {
        if ("production" !== process.env.NODE_ENV) {
          throw new Error('HTML documents as Interweave content are not supported.');
        }
      } else {
        doc.body.innerHTML = this.convertLineBreaks(markup);
      }

      return doc;
    }
  }, {
    key: "extractAttributes",
    value: function extractAttributes(node) {
      var _this2 = this;

      var disableWhitelist = this.props.disableWhitelist;
      var attributes = {};
      var count = 0;

      if (node.nodeType !== ELEMENT_NODE || !node.attributes) {
        return null;
      }

      Array.from(node.attributes).forEach(function (attr) {
        var name = attr.name,
            value = attr.value;
        var newName = name.toLowerCase();
        var filter = _constants.ATTRIBUTES[newName] || _constants.ATTRIBUTES[name];

        if (!_this2.isSafe(node)) {
          return;
        }

        if (newName.slice(0, ARIA_COMPARE_LENGTH) !== 'aria-') {
          if (!disableWhitelist && (!filter || filter === _constants.FILTER_DENY) || newName.match(/^on/) || value.replace(/(\s|\0|&#x0(9|A|D);)/, '').match(/(javascript|vbscript|livescript|xss):/i)) {
            return;
          }
        }

        var newValue = _this2.applyAttributeFilters(newName, value);

        if (filter === _constants.FILTER_CAST_BOOL) {
          newValue = true;
        } else if (filter === _constants.FILTER_CAST_NUMBER) {
          newValue = parseFloat(newValue);
        } else {
          newValue = String(newValue);
        }

        attributes[_constants.ATTRIBUTES_TO_PROPS[newName] || newName] = newValue;
        count += 1;
      });

      if (count === 0) {
        return null;
      }

      return attributes;
    }
  }, {
    key: "getTagConfig",
    value: function getTagConfig(tagName) {
      if (_constants.TAGS[tagName]) {
        return (0, _objectSpread2.default)({}, _constants.TAGS[tagName], {
          tagName: tagName
        });
      }

      return {};
    }
  }, {
    key: "isSafe",
    value: function isSafe(node) {
      if (typeof HTMLAnchorElement !== 'undefined' && node instanceof HTMLAnchorElement) {
        var href = node.getAttribute('href');

        if (href && href.charAt(0) === '#') {
          return true;
        }

        var protocol = node.protocol.toLowerCase();
        return protocol === ':' || protocol === 'http:' || protocol === 'https:' || protocol === 'mailto:';
      }

      return true;
    }
  }, {
    key: "parse",
    value: function parse() {
      return this.parseNode(this.doc.body, (0, _objectSpread2.default)({}, _constants.CONFIG_BLOCK, {
        tagName: 'body'
      }));
    }
  }, {
    key: "parseNode",
    value: function parseNode(parentNode, parentConfig) {
      var _this3 = this;

      var _this$props2 = this.props,
          noHtml = _this$props2.noHtml,
          noHtmlExceptMatchers = _this$props2.noHtmlExceptMatchers,
          disableWhitelist = _this$props2.disableWhitelist,
          transform = _this$props2.transform;
      var content = [];
      var mergedText = '';
      Array.from(parentNode.childNodes).forEach(function (node) {
        if (node.nodeType === ELEMENT_NODE) {
          var tagName = node.nodeName.toLowerCase();

          var config = _this3.getTagConfig(tagName);

          if (mergedText) {
            content.push(mergedText);
            mergedText = '';
          }

          var nextNode = _this3.applyNodeFilters(tagName, node);

          if (!nextNode) {
            return;
          }

          var children;

          if (transform) {
            _this3.keyIndex += 1;
            var _key = _this3.keyIndex;
            children = _this3.parseNode(nextNode, config);
            var transformed = transform(nextNode, children, config);

            if (transformed === null) {
              return;
            } else if (typeof transformed !== 'undefined') {
              content.push(_react.default.cloneElement(transformed, {
                key: _key
              }));
              return;
            }

            _this3.keyIndex = _key - 1;
          }

          if (_constants.TAGS_BLACKLIST[tagName]) {
            return;
          }

          if (!(noHtml || noHtmlExceptMatchers && tagName !== 'br') && (disableWhitelist || _this3.canRenderChild(parentConfig, config))) {
            _this3.keyIndex += 1;

            var attributes = _this3.extractAttributes(nextNode);

            var elementProps = {
              tagName: tagName
            };

            if (attributes) {
              elementProps.attributes = attributes;
            }

            if (config.void) {
              elementProps.selfClose = config.void;
            }

            content.push(_react.default.createElement(_Element.default, (0, _objectSpread2.default)({}, elementProps, {
              key: _this3.keyIndex
            }), children || _this3.parseNode(nextNode, config)));
          } else {
            content = content.concat(_this3.parseNode(nextNode, config.tagName ? config : parentConfig));
          }
        } else if (node.nodeType === TEXT_NODE) {
          var text = noHtml && !noHtmlExceptMatchers ? node.textContent : _this3.applyMatchers(node.textContent || '', parentConfig);

          if (Array.isArray(text)) {
            content = content.concat(text);
          } else {
            mergedText += text;
          }
        }
      });

      if (mergedText) {
        content.push(mergedText);
      }

      return content;
    }
  }]);
  return Parser;
}();

exports.default = Parser;