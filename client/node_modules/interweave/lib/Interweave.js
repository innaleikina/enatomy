"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Parser = _interopRequireDefault(require("./Parser"));

var _Markup = _interopRequireDefault(require("./Markup"));

var Interweave = function (_React$PureComponent) {
  (0, _inherits2.default)(Interweave, _React$PureComponent);

  function Interweave() {
    (0, _classCallCheck2.default)(this, Interweave);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Interweave).apply(this, arguments));
  }

  (0, _createClass2.default)(Interweave, [{
    key: "parseMarkup",
    value: function parseMarkup() {
      var _this = this;

      var _ref = this.props,
          tagName = _ref.tagName,
          content = _ref.content,
          emptyContent = _ref.emptyContent,
          onBeforeParse = _ref.onBeforeParse,
          onAfterParse = _ref.onAfterParse,
          matchers = _ref.matchers,
          disableMatchers = _ref.disableMatchers,
          filters = _ref.filters,
          disableFilters = _ref.disableFilters,
          props = (0, _objectWithoutProperties2.default)(_ref, ["tagName", "content", "emptyContent", "onBeforeParse", "onAfterParse", "matchers", "disableMatchers", "filters", "disableFilters"]);
      var allMatchers = disableMatchers ? [] : matchers;
      var allFilters = disableFilters ? [] : filters;
      var beforeCallbacks = onBeforeParse ? [onBeforeParse] : [];
      var afterCallbacks = onAfterParse ? [onAfterParse] : [];
      allMatchers.forEach(function (matcher) {
        if (matcher.onBeforeParse) {
          beforeCallbacks.push(matcher.onBeforeParse.bind(matcher));
        }

        if (matcher.onAfterParse) {
          afterCallbacks.push(matcher.onAfterParse.bind(matcher));
        }
      });
      var markup = beforeCallbacks.reduce(function (string, callback) {
        var nextString = callback(string, _this.props);

        if ("production" !== process.env.NODE_ENV) {
          if (typeof nextString !== 'string') {
            throw new TypeError('Interweave `onBeforeParse` must return a valid HTML string.');
          }
        }

        return nextString;
      }, content || '');
      var parser = new _Parser.default(markup, props, allMatchers, allFilters);
      var nodes = afterCallbacks.reduce(function (parserNodes, callback) {
        var nextNodes = callback(parserNodes, _this.props);

        if ("production" !== process.env.NODE_ENV) {
          if (!Array.isArray(nextNodes)) {
            throw new TypeError('Interweave `onAfterParse` must return an array of strings and React elements.');
          }
        }

        return nextNodes;
      }, parser.parse());

      if (nodes.length === 0) {
        return emptyContent;
      }

      return nodes;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          disableLineBreaks = _this$props.disableLineBreaks,
          disableWhitelist = _this$props.disableWhitelist,
          emptyContent = _this$props.emptyContent,
          noHtml = _this$props.noHtml,
          noHtmlExceptMatchers = _this$props.noHtmlExceptMatchers,
          tagName = _this$props.tagName;
      return _react.default.createElement(_Markup.default, {
        disableLineBreaks: disableLineBreaks,
        disableWhitelist: disableWhitelist,
        emptyContent: emptyContent,
        noHtml: noHtml,
        noHtmlExceptMatchers: noHtmlExceptMatchers,
        tagName: tagName,
        parsedContent: this.parseMarkup()
      });
    }
  }]);
  return Interweave;
}(_react.default.PureComponent);

exports.default = Interweave;
(0, _defineProperty2.default)(Interweave, "propTypes", {
  disableFilters: _propTypes.default.bool,
  disableMatchers: _propTypes.default.bool,
  filters: _propTypes.default.arrayOf(_propTypes.default.any),
  matchers: _propTypes.default.arrayOf(_propTypes.default.any),
  onAfterParse: _propTypes.default.oneOfType([_propTypes.default.any, _propTypes.default.oneOf([null])]),
  onBeforeParse: _propTypes.default.oneOfType([_propTypes.default.any, _propTypes.default.oneOf([null])]),
  transform: _propTypes.default.oneOfType([_propTypes.default.any, _propTypes.default.oneOf([null])])
});
(0, _defineProperty2.default)(Interweave, "defaultProps", {
  content: '',
  disableFilters: false,
  disableLineBreaks: false,
  disableMatchers: false,
  disableWhitelist: false,
  emptyContent: null,
  filters: [],
  matchers: [],
  noHtml: false,
  noHtmlExceptMatchers: false,
  onAfterParse: null,
  onBeforeParse: null,
  tagName: 'span',
  transform: null
});