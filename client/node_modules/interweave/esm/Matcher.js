import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React from 'react';

var Matcher = function () {
  function Matcher(name) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var factory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, Matcher);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "propName", void 0);

    _defineProperty(this, "inverseName", void 0);

    _defineProperty(this, "factory", void 0);

    if ("production" !== process.env.NODE_ENV) {
      if (!name || name.toLowerCase() === 'html') {
        throw new Error("The matcher name \"".concat(name, "\" is not allowed."));
      }
    }

    this.options = _objectSpread({}, options);
    this.propName = name;
    this.inverseName = "no".concat(name.charAt(0).toUpperCase() + name.slice(1));
    this.factory = factory;
  }

  _createClass(Matcher, [{
    key: "createElement",
    value: function createElement(match, props) {
      var element = null;

      if (this.factory) {
        element = React.createElement(this.factory, props, match);
      } else {
        element = this.replaceWith(match, props);
      }

      if ("production" !== process.env.NODE_ENV) {
        if (typeof element !== 'string' && !React.isValidElement(element)) {
          throw new Error("Invalid React element created from ".concat(this.constructor.name, "."));
        }
      }

      return element;
    }
  }, {
    key: "doMatch",
    value: function doMatch(string, pattern, callback) {
      var matches = string.match(pattern instanceof RegExp ? pattern : new RegExp(pattern, 'i'));

      if (!matches) {
        return null;
      }

      return _objectSpread({}, callback(matches), {
        match: matches[0]
      });
    }
  }, {
    key: "onBeforeParse",
    value: function onBeforeParse(content, props) {
      return content;
    }
  }, {
    key: "onAfterParse",
    value: function onAfterParse(content, props) {
      return content;
    }
  }]);

  return Matcher;
}();

export { Matcher as default };